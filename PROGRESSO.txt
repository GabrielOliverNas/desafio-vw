Data Format: JSON
Entity: 
    User                                                                            OK
        uuid
        DateTime creationDate
        DateTime updatedDate
        String name
        String password (bcrypt)
        Boolean isActived
        Boolean isRoot
    Color Obs:. entidade estatica pre-cadastrada com ('Preto', 'Branco, 'Vermelho', 'Cinza', 'Azul')
        uuid 
        String colorName
    Model Obs:. entidade estatica pre-cadastrada com ('T-Cross', 'Nivus', 'Polo', 'Virtus', 'Saveiro', 'Track')
        uuid 
        String modeName
    Vehicle 
        uuid 
        String creationUserName
        String updatedUserName
        DateTime creationDate
        DateTime updatedDate
        Model model
        Color color
        Number year

Tecnologias: 
    o Node-RED com API RESTful (Permitido dependencias JWT) OK
    o React JS e Typescript (Sem dependencias de estilizacao usar HTML e CSS puro) OK

Funcionalidades da Aplicacao:
    Autenticacao:
        o Login com nome/senha OK
        o Autenticacao via JWT (JSON Web Token) OK
        o Todas a rotas API devem verificar a existencia do token no cabecalho da requisicao caso contrario nao permitir OK

Listar todos os veiculos com:
        Tabela contendo todos os campos do veiculo inclusive foto
Listar todos os veiculos com:
    Tabela contendo todos os campos do veiculo inclusive foto
    Paginacao permitindo usuario escolher quantidade de linhas a serem exibidas e N da pagina
    Ordenacao por modelo, cor, ano e data de criacao
    Busca por informacao inputada

Usuario Root pode criar/alterar usuarios e gerenciar veiculos

Usuario nao Root somente gerenciar veiculos

Usuario Root pode criar/alterar usuarios e gerenciar veiculos
Devera gerar um log interno do evento no backend formatado da seguinte maneira:
    [{Date/Time}][{UserName}][{Route Name}]: {Request Payload} (Transformar em JSON String)

o Adicionar novos veiculos.
    Devera gerar um log interno do evento no backend formatado da seguinte maneira: [{Date/Time}][{UserName}][{Route Name}]: {Request Payload} (Transformar em JSON String)
padronizar responses no front e no back

Alterar informacoes de veiculos/cores/modelos.
    Devera gerar um log interno do evento no backend formatado da seguinte maneira: [{Date/Time}][{UserName}][{Route Name}]: {Request Payload} (Transformar em JSON String)
Excluir veiculo.
    Devera gerar um log interno do evento no backend formatado da seguinte maneira: [{Date/Time}][{UserName}][{Route Name}]: {Request Payload} (Transformar em JSON String)

