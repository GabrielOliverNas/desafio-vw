[
    {
        "id": "e771a27fee406b2a",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07eae8f9fe820c4e",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "dashboard",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 240,
        "wires": [
            [
                "ef41793ff7ea5a80"
            ]
        ]
    },
    {
        "id": "ef41793ff7ea5a80",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Montar-JWT",
        "func": "var authHeader = msg.req.headers.authorization;\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.payload = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 240,
        "wires": [
            [
                "85884d926390e238"
            ]
        ]
    },
    {
        "id": "85884d926390e238",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "payload",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1880,
        "y": 240,
        "wires": [
            [
                "ee7ca56abe9406f2"
            ]
        ]
    },
    {
        "id": "daafb42cae8476ed",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2280,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee7ca56abe9406f2",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Retorno-JWT",
        "func": "msg.payload = {\n    status: \"success\",\n    data: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 240,
        "wires": [
            [
                "daafb42cae8476ed"
            ]
        ]
    },
    {
        "id": "58d4f9ef4ce89af9",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserir-usuario",
        "url": "/inserir-usuario",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "39d53ea750789921"
            ]
        ]
    },
    {
        "id": "ed4e5d5a240372ba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7660d8bc47aa36d6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 7",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    let payload = msg.request;\n\n    const requiredFields = ['name', 'password'];\n    const missingFields = requiredFields.filter(field => !payload[field]);\n\n    if (missingFields.length > 0) {\n        msg.statusCode = 400;\n        msg.payload = { error: `Missing required fields: ${missingFields.join(', ')}` };\n        return [null, msg];\n    }\n\n    const user = {\n        uuid: Date.now().toString(),\n        name: payload.name,\n        password: payload.password,\n        isActived: payload.isActived,\n        isRoot: payload.isRoot || false,\n        creationDate: new Date().toISOString(),\n        roles: payload.isRoot ? [\"ADMIN\"] : [\"USER\"]\n    };\n\n    let users = flow.get('users', 'file') || [];\n    if (!Array.isArray(users)) {\n        users = [];\n    }\n\n    const userFound = users.find(i => i.name === payload.name);\n\n    if (userFound) {\n        msg.statusCode = 400;\n        msg.payload = { error: 'User already exists' };\n        return [null, msg];\n    }\n\n    users.push(user);\n    flow.set('users', users, 'file');\n\n    msg.statusCode = 201;\n    msg.payload = user;\n    return [msg, null];\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Erro interno no servidor\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1020,
        "wires": [
            [
                "3dc84f200903ad4d"
            ],
            [
                "51d2b45443ba48ea"
            ]
        ]
    },
    {
        "id": "2f2b4577e66c6063",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-usuarios",
        "url": "/listar-usuarios",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "ca92d0cf38cc8fa1"
            ]
        ]
    },
    {
        "id": "930307daf030c5a9",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1200,
        "wires": []
    },
    {
        "id": "22b91667282cd53c",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 8",
        "func": "msg.payload = flow.get('users', 'file');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1200,
        "wires": [
            [
                "930307daf030c5a9"
            ]
        ]
    },
    {
        "id": "a9ba72bed6e2feca",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "deletar-usuario-id",
        "url": "/deletar-usuario-id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "3a0b8b5abc860260"
            ]
        ]
    },
    {
        "id": "849b98a3bb34bf09",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5718d44be8d4de38",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 10",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    const uuid = msg.request.uuid;\n    if (!uuid) {\n        msg.statusCode = 400;\n        msg.payload = { error: 'UUID not provided' };\n        return [null, msg];\n    }\n\n    let users = flow.get('users', 'file') || [];\n    if (!Array.isArray(users)) {\n        users = [];\n    }\n\n    let u = users.find(i => i.uuid === uuid);\n    if (u) {\n        users = users.filter(i => i.uuid !== uuid);\n        flow.set('users', users, 'file');\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: 'User successfully removed' };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'User not found with that UUID' };\n        return [null, msg];\n    }\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "3d673acd3a0ca0db"
            ],
            [
                "81402899d66bf9c3"
            ]
        ]
    },
    {
        "id": "ee6db109f6b31ba7",
        "type": "inject",
        "z": "e771a27fee406b2a",
        "name": "colors-inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "8b456eb5bfe06708"
            ]
        ]
    },
    {
        "id": "8b456eb5bfe06708",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "table-colors",
        "func": "const names = ['Preto', 'Branco', 'Vermelho', 'Cinza', 'Azul'];\n\nconst colors = names.map((colorName, index) => {\n  return {\n    uuid: (index + 1).toString(),\n    colorName: colorName\n  };\n});\n\nglobal.set('colorsTable', colors);\n\nmsg.payload = colors;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "22f1418d46eabb50"
            ]
        ]
    },
    {
        "id": "22f1418d46eabb50",
        "type": "debug",
        "z": "e771a27fee406b2a",
        "name": "Debug Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "bd6a73b25168887c",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "table-models",
        "func": "const names = ['T-Cross', 'Nivus', 'Polo', 'Virtus', 'Saveiro', 'Track'];\n\nconst models = names.map((modelName, index) => {\n  return {\n    uuid: (index + 1).toString(),\n    modelName: modelName\n  };\n});\n\nglobal.set('modelsTable', models);\n\nmsg.payload = models;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "e4ef9b9b757f6773"
            ]
        ]
    },
    {
        "id": "e77304bacf005b68",
        "type": "inject",
        "z": "e771a27fee406b2a",
        "name": "models-inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "bd6a73b25168887c"
            ]
        ]
    },
    {
        "id": "e4ef9b9b757f6773",
        "type": "debug",
        "z": "e771a27fee406b2a",
        "name": "Debug Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 100,
        "wires": []
    },
    {
        "id": "bcc2e62901cb0f68",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "usuario-id",
        "url": "/usuario-id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1280,
        "wires": [
            [
                "efc2ecc451caab37"
            ]
        ]
    },
    {
        "id": "fb009c7556ac4451",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b7ccf828195daa9d",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 2",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    let uuid = msg.request.uuid;\n    if (!uuid) {\n        msg.statusCode = 400;\n        msg.payload = { error: 'UUID not provided' };\n        return [null, msg];\n    }\n\n    let users = flow.get('users', 'file') || [];\n    if (!Array.isArray(users)) {\n        users = [];\n    }\n\n    let foundUser = users.find(u => u.uuid === uuid);\n    if (foundUser) {\n        msg.statusCode = 200;\n        msg.payload = foundUser;\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'User not found with that UUID' };\n        return [null, msg];\n    }\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: 'Internal server error', detail: err.message };\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1280,
        "wires": [
            [
                "fb009c7556ac4451"
            ],
            [
                "0bea5005270b2d3b"
            ]
        ]
    },
    {
        "id": "a9383d9f2e063f8e",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "remover-veiculo-id",
        "url": "/remover-veiculo-id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 1530,
        "y": 780,
        "wires": [
            [
                "d1f8619815780db1"
            ]
        ]
    },
    {
        "id": "d1f8619815780db1",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 1",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 780,
        "wires": [
            [
                "fe527af7383f65a9"
            ]
        ]
    },
    {
        "id": "6536798f2570ce67",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "exclusao-veiculo",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    let veiculos = flow.get('veiculo') || [];\n    let uuid = msg.request.uuid;\n\n    if (!Array.isArray(veiculos)) {\n        veiculos = [];\n    }\n\n    if (!uuid) {\n        msg.statusCode = 400;\n        msg.payload = { error: \"UUID nÃ£o informado.\" };\n        return [null, msg];\n    }\n\n    let existe = veiculos.find(v => v.uuid === uuid);\n\n    if (existe) {\n        veiculos = veiculos.filter(v => v.uuid !== uuid);\n        flow.set('veiculo', veiculos);\n\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: \"VeÃ­culo removido com sucesso.\" };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: \"VeÃ­culo nÃ£o encontrado.\" };\n        return [null, msg];\n    }\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", details: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 780,
        "wires": [
            [
                "77d797dfad31c3fc"
            ],
            [
                "7c36fe1811e73e7a"
            ]
        ]
    },
    {
        "id": "77d797dfad31c3fc",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 760,
        "wires": [
            [
                "8a59134bcd54faba"
            ]
        ]
    },
    {
        "id": "8a59134bcd54faba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 760,
        "wires": []
    },
    {
        "id": "aaa8c237613f7719",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 5",
        "func": "try {\n  if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Admin role required' };\n    return [null, msg];\n  }\n\n  let veiculos = flow.get('veiculo') || [];\n  let request = msg.request;\n  let creationDate = new Date().toISOString();\n\n  let models = global.get('modelsTable') || [];\n  let colors = global.get('colorsTable') || [];\n\n  const modelfound = models.find(i => i.uuid === request.modelUuid);\n  const colorfound = colors.find(i => i.uuid === request.colorUuid);\n\n  if (!modelfound || !colorfound) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'Model or Color not found' };\n    return [null, msg];\n  }\n\n  const novoVeiculo = {\n    uuid: Date.now().toString(),\n    creationUserName: msg.user.name,\n    updateUserName: request.updateUserName,\n    creationDate: creationDate,\n    model: modelfound,\n    color: colorfound,\n    year: request.year,\n    imagePath: request.imagePath\n  };\n\n  veiculos.push(novoVeiculo);\n\n  flow.set('veiculo', veiculos);\n\n  msg.statusCode = 201;\n  msg.payload = {\n    status: 'sucesso',\n    message: \"VeÃ­culo inserido com sucesso!\",\n    total: veiculos.length,\n    veiculo: novoVeiculo\n  };\n  return [msg, null];\n\n} catch (err) {\n  msg.statusCode = 500;\n  msg.payload = { error: 'Internal server error', detail: err.message };\n  return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 560,
        "wires": [
            [
                "c9f68b992138402e"
            ],
            [
                "9b29050649c69b72"
            ]
        ]
    },
    {
        "id": "063999c33dd1cf88",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserir-veiculo",
        "url": "/inserir-veiculo",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "994f2b227115dc48"
            ]
        ]
    },
    {
        "id": "c24ce0c9eb711bba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 540,
        "wires": []
    },
    {
        "id": "994f2b227115dc48",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 560,
        "wires": [
            [
                "fe5513e8b01be357"
            ]
        ]
    },
    {
        "id": "fe5513e8b01be357",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1900,
        "y": 560,
        "wires": [
            [
                "60b28f9c1a0ac5b8"
            ]
        ]
    },
    {
        "id": "d3e38b360fbae5dc",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-veiculos-paginado",
        "url": "/listar-veiculos-paginado",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1540,
        "y": 660,
        "wires": [
            [
                "6c683a78c4fff1fe"
            ]
        ]
    },
    {
        "id": "6c683a78c4fff1fe",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 660,
        "wires": [
            [
                "7c1502a697e580f8"
            ]
        ]
    },
    {
        "id": "416ee531ccb7dcc6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 6",
        "func": "try {\n    let vehicles = flow.get('veiculo') || [];\n    let payload = msg.request;\n\n    if (!Array.isArray(vehicles)) {\n        vehicles = [];\n    }\n\n    const search = (payload.search || \"\").toLowerCase();\n    const sortField = payload.sortField || \"\";\n    const sortOrder = payload.sortOrder === \"desc\" ? \"desc\" : \"asc\";\n    const page = parseInt(payload.page) || 1;\n    const limit = parseInt(payload.limit) || 5;\n\n    let filtered = vehicles.filter(v => {\n        const model = v.model?.modelName?.toLowerCase() || \"\";\n        const color = v.color?.colorName?.toLowerCase() || \"\";\n        const year = v.year?.toString() || \"\";\n        const creator = v.creationUserName?.toLowerCase() || \"\";\n\n        return (\n            model.includes(search) ||\n            color.includes(search) ||\n            year.includes(search) ||\n            creator.includes(search)\n        );\n    });\n\n    if (sortField) {\n        filtered.sort((a, b) => {\n            let aValue, bValue;\n\n            switch (sortField) {\n                case \"model\":\n                    aValue = a.model?.modelName?.toLowerCase() || \"\";\n                    bValue = b.model?.modelName?.toLowerCase() || \"\";\n                    break;\n                case \"color\":\n                    aValue = a.color?.colorName?.toLowerCase() || \"\";\n                    bValue = b.color?.colorName?.toLowerCase() || \"\";\n                    break;\n                case \"year\":\n                    aValue = a.year || 0;\n                    bValue = b.year || 0;\n                    break;\n                case \"creationDate\":\n                    aValue = new Date(a.creationDate).getTime() || 0;\n                    bValue = new Date(b.creationDate).getTime() || 0;\n                    break;\n                default:\n                    aValue = \"\";\n                    bValue = \"\";\n            }\n\n            if (aValue < bValue) return sortOrder === \"asc\" ? -1 : 1;\n            if (aValue > bValue) return sortOrder === \"asc\" ? 1 : -1;\n            return 0;\n        });\n    }\n\n    const total = filtered.length;\n    const start = (page - 1) * limit;\n    const end = start + limit;\n    const paginated = filtered.slice(start, end);\n\n    msg.statusCode = 200;\n    msg.payload = {\n        total: total,\n        page: page,\n        limit: limit,\n        data: paginated\n    };\n\n    return [msg, null];\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", details: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 660,
        "wires": [
            [
                "cd8d5dd2c1e92c9d"
            ],
            [
                "13ada1433c96a6b1"
            ]
        ]
    },
    {
        "id": "cd8d5dd2c1e92c9d",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 660,
        "wires": []
    },
    {
        "id": "440b9d10266c5458",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "alterar-usuario",
        "url": "/alterar-usuario",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "22861edba5d0cb71"
            ]
        ]
    },
    {
        "id": "ae1a2dce88636532",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 4",
        "func": "try {\n    const request = msg.request;\n    const uuid = request.uuid;\n\n    const requiredFields = ['uuid', 'name', 'password'];\n    const missingFields = requiredFields.filter(field => !request[field]);\n\n    if (missingFields.length > 0) {\n        msg.statusCode = 400;\n        msg.payload = { error: `Missing required fields: ${missingFields.join(', ')}` };\n        return [null, msg];\n    }\n\n    let users = flow.get('users', 'file') || [];\n    let updateDate = new Date().toISOString();\n\n    if (!Array.isArray(users)) {\n        users = [];\n    }\n\n    let u = users.find(i => i.uuid === uuid);\n\n    if (u) {\n        request.uuid = uuid;\n        request.updateDate = updateDate;\n        request.creationDate = u.creationDate;\n        request.roles = request.roles || u.roles;\n\n        console.log(msg.user.roles)\n\n        if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n            msg.statusCode = 403;\n            msg.payload = { error: 'Forbidden: Admin role required' };\n            return [null, msg];\n        }\n\n        users = users.filter(i => i.uuid !== uuid);\n        users.push(request);\n        flow.set('users', users, 'file');\n\n        msg.statusCode = 200;\n        msg.payload = { message: 'User updated successfully', user: request };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'User not found with that UUID' };\n        return [null, msg];\n    }\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: 'Internal server error', detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 920,
        "wires": [
            [
                "3176f7dc4c9017d7"
            ],
            [
                "14b7e371c281b148"
            ]
        ]
    },
    {
        "id": "2850e51dc8b3dbda",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 900,
        "wires": []
    },
    {
        "id": "9d147b0d677bee97",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "login",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1490,
        "y": 320,
        "wires": [
            [
                "fae8ccc85c33ef61"
            ]
        ]
    },
    {
        "id": "fae8ccc85c33ef61",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 11",
        "func": "try {\n    let usuarios = flow.get('users', 'file') || [];\n    let usuarioRequest = msg.payload;\n\n    if (!Array.isArray(usuarios)) {\n        usuarios = [];\n        if (usuarios.length === 0) {\n            usuarios.push({\n                name: 'admin',\n                password: 'admin',\n                roles: ['ADMIN']\n            });\n        }\n    }\n\n    let user = usuarios.find(u =>\n        u.name === usuarioRequest.name &&\n        u.password === usuarioRequest.password\n    );\n\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"Invalid credentials\" };\n\n        console.log('user', usuarioRequest)\n        return [null, msg];\n    }\n    \n    msg.user = {\n        name: user.name,\n        roles: user.roles || ['USER']\n    };\n\n    return [msg, null];\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 320,
        "wires": [
            [
                "4bbc06ba0a7cefc6"
            ],
            [
                "64033be791c9671b"
            ]
        ]
    },
    {
        "id": "ba6d3e4576690e8d",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2310,
        "y": 300,
        "wires": []
    },
    {
        "id": "4bbc06ba0a7cefc6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar JWT",
        "func": "msg.jwtSecret = \"minha_chave_secreta\";\nmsg.jwtOptions = { expiresIn: \"1h\" };\n\nmsg.payload = msg.user;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 300,
        "wires": [
            [
                "664438f386876268"
            ]
        ]
    },
    {
        "id": "664438f386876268",
        "type": "jwt sign",
        "z": "e771a27fee406b2a",
        "name": "jwt",
        "algorithm": "HS256",
        "mode": "secret",
        "secret": "minha_chave_secreta",
        "secretType": "str",
        "privateKey": "",
        "privateKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "expiresIn": 3600,
        "expiresInType": "num",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "sign": "user",
        "signType": "msg",
        "notBefore": "",
        "notBeforeType": "num",
        "x": 1990,
        "y": 300,
        "wires": [
            [
                "466fe941650891c4"
            ]
        ]
    },
    {
        "id": "466fe941650891c4",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 12",
        "func": "msg.payload = { token: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 300,
        "wires": [
            [
                "ba6d3e4576690e8d"
            ]
        ]
    },
    {
        "id": "ca92d0cf38cc8fa1",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "266e2ac5e9ae2868"
            ]
        ]
    },
    {
        "id": "efc2ecc451caab37",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1280,
        "wires": [
            [
                "2ac942dd4fafd962"
            ]
        ]
    },
    {
        "id": "2ac942dd4fafd962",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 560,
        "y": 1280,
        "wires": [
            [
                "1341a80149fd318a"
            ]
        ]
    },
    {
        "id": "3176f7dc4c9017d7",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 900,
        "wires": [
            [
                "2850e51dc8b3dbda"
            ]
        ]
    },
    {
        "id": "3a0b8b5abc860260",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1120,
        "wires": [
            [
                "faa11aa113e8e6bd"
            ]
        ]
    },
    {
        "id": "faa11aa113e8e6bd",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 560,
        "y": 1120,
        "wires": [
            [
                "06f7857f7ba29cab"
            ]
        ]
    },
    {
        "id": "266e2ac5e9ae2868",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 560,
        "y": 1200,
        "wires": [
            [
                "22b91667282cd53c"
            ]
        ]
    },
    {
        "id": "fe527af7383f65a9",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1880,
        "y": 780,
        "wires": [
            [
                "2fdc89e5377ae90d"
            ]
        ]
    },
    {
        "id": "7c1502a697e580f8",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1980,
        "y": 660,
        "wires": [
            [
                "9caf103f87d25d72"
            ]
        ]
    },
    {
        "id": "aff74b7dce384112",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-colors",
        "url": "/colors",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "2d7707838c0525c5"
            ]
        ]
    },
    {
        "id": "2d7707838c0525c5",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 3",
        "func": "msg.payload = global.get('colorsTable');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            [
                "0ce68cce514a52c6"
            ]
        ]
    },
    {
        "id": "0ce68cce514a52c6",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "c389ed6fc6b93f26",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-models",
        "url": "/models",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "a638a01bb2ee90be"
            ]
        ]
    },
    {
        "id": "a638a01bb2ee90be",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 9",
        "func": "msg.payload = global.get('modelsTable');\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 520,
        "wires": [
            [
                "f9b512136bf6f7ed"
            ],
            [
                "87f5bb005dd0f91b"
            ]
        ]
    },
    {
        "id": "f9b512136bf6f7ed",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 480,
        "wires": []
    },
    {
        "id": "884d9d1ac8aaab0c",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-veiculo-id",
        "url": "/listar-veiculo-id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1520,
        "y": 860,
        "wires": [
            [
                "7afb33d92f016d56"
            ]
        ]
    },
    {
        "id": "c0795fb9745f1567",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 2760,
        "y": 860,
        "wires": []
    },
    {
        "id": "e156779fadeeb85e",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 13",
        "func": "try {\n  if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Admin role required' };\n    return [null, msg];\n  }\n\n  const veiculos = flow.get('veiculo') || [];\n  const uuid = msg.request.uuid;\n\n  if (!uuid) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"UUID nÃ£o informado\" };\n    return [null, msg];\n  }\n\n  const veiculo = veiculos.find(v => v.uuid === uuid);\n\n  if (veiculo) {\n    msg.statusCode = 200;\n    msg.payload = {\n      message: 'VeÃ­culo identificado',\n      veiculo: veiculo\n    };\n    return [msg, null];\n  } else {\n    msg.statusCode = 404;\n    msg.payload = {\n      error: 'VeÃ­culo inexistente'\n    };\n    return [null, msg];\n  }\n} catch (err) {\n  msg.statusCode = 500;\n  msg.payload = { error: \"Internal server error\", details: err.message };\n  return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 860,
        "wires": [
            [
                "c0795fb9745f1567"
            ],
            [
                "b6a5b3757c6685ae"
            ]
        ]
    },
    {
        "id": "7afb33d92f016d56",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 860,
        "wires": [
            [
                "6c88b8c6dec4d6b7"
            ]
        ]
    },
    {
        "id": "6c88b8c6dec4d6b7",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1980,
        "y": 860,
        "wires": [
            [
                "89f666e00b415f9a"
            ]
        ]
    },
    {
        "id": "ef20ad63d2cc5f7b",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "alterar-veiculo-id",
        "url": "/alterar-veiculo-id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1520,
        "y": 960,
        "wires": [
            [
                "0969ae314d9b20fa"
            ]
        ]
    },
    {
        "id": "ee40c14b1363bb74",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 2760,
        "y": 940,
        "wires": []
    },
    {
        "id": "989282fe68c0a670",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 14",
        "func": "try {\n  if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n    msg.statusCode = 403;\n    msg.payload = { error: 'Forbidden: Admin role required' };\n    return [null, msg];\n  }\n\n  const requisicao = msg.request;\n  const uuid = requisicao.uuid;\n\n  let veiculos = flow.get('veiculo') || [];\n  if (!Array.isArray(veiculos)) {\n    veiculos = [];\n  }\n\n  if (!uuid) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"UUID nÃ£o informado\" };\n    return [null, msg];\n  }\n\n  const veiculoExistente = veiculos.find(v => v.uuid === uuid);\n  if (!veiculoExistente) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"VeÃ­culo nÃ£o encontrado\" };\n    return [null, msg];\n  }\n\n  veiculos = veiculos.filter(v => v.uuid !== uuid);\n\n  const models = global.get('modelsTable') || [];\n  const colors = global.get('colorsTable') || [];\n\n  const modelFound = models.find(m => m.uuid === requisicao.modelUuid);\n  const colorFound = colors.find(c => c.uuid === requisicao.colorUuid);\n\n  if (!modelFound || !colorFound) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"Modelo ou cor nÃ£o encontrado\" };\n    return [null, msg];\n  }\n\n  const updateDate = new Date().toISOString();\n\n  const veiculoAtualizado = {\n    uuid: uuid,\n    model: modelFound,\n    color: colorFound,\n    year: requisicao.year,\n    imagePath: requisicao.imagePath,\n    creationUserName: veiculoExistente.creationUserName,\n    creationDate: veiculoExistente.creationDate,\n    updateDate: updateDate\n  };\n\n  veiculos.push(veiculoAtualizado);\n  flow.set('veiculo', veiculos);\n\n  msg.statusCode = 200;\n  msg.payload = { message: \"VeÃ­culo atualizado\", veiculo: veiculoAtualizado };\n  return [msg, null];\n\n} catch (err) {\n  msg.statusCode = 500;\n  msg.payload = { error: \"Internal server error\", details: err.message };\n  return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 960,
        "wires": [
            [
                "f754a25c3cd49254"
            ],
            [
                "139ee79fc85ad8dc"
            ]
        ]
    },
    {
        "id": "0969ae314d9b20fa",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 960,
        "wires": [
            [
                "7d72608e25a2022c"
            ]
        ]
    },
    {
        "id": "7d72608e25a2022c",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 1980,
        "y": 960,
        "wires": [
            [
                "67c8b447696efcc4"
            ]
        ]
    },
    {
        "id": "0e04395aa3b2a946",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "user-admin-inject",
        "func": "let users = [\n    {\n        uuid: Date.now().toString(),\n        name: 'admin',\n        password: 'admin',\n        isActived: true,\n        isRoot: true,\n        roles: ['ADMIN'],\n        creationDate: new Date().toISOString()\n    },\n    {\n        uuid: Date.now().toString(),\n        name: 'admin1',\n        password: 'admin1',\n        isActived: true,\n        isRoot: false,\n        roles: ['USER'],\n        creationDate: new Date().toISOString()\n    }\n]\n\nflow.set('users', users, 'file')\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 60,
        "wires": [
            [
                "f3ddb2ec0c0cc724"
            ]
        ]
    },
    {
        "id": "25ba1fbf98f7d1e1",
        "type": "inject",
        "z": "e771a27fee406b2a",
        "name": "admin-inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "0e04395aa3b2a946"
            ]
        ]
    },
    {
        "id": "f3ddb2ec0c0cc724",
        "type": "debug",
        "z": "e771a27fee406b2a",
        "name": "Debug Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "64033be791c9671b",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1810,
        "y": 340,
        "wires": []
    },
    {
        "id": "22861edba5d0cb71",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 920,
        "wires": [
            [
                "4de884239c348433"
            ]
        ]
    },
    {
        "id": "4de884239c348433",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 480,
        "y": 920,
        "wires": [
            [
                "ebd5b077b8ee5dcb"
            ]
        ]
    },
    {
        "id": "39d53ea750789921",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token nÃ£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1020,
        "wires": [
            [
                "71f5669e6807c7a1"
            ]
        ]
    },
    {
        "id": "71f5669e6807c7a1",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "b979263c9ec503fd"
            ]
        ]
    },
    {
        "id": "14b7e371c281b148",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 940,
        "wires": []
    },
    {
        "id": "51d2b45443ba48ea",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1040,
        "wires": []
    },
    {
        "id": "81402899d66bf9c3",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0bea5005270b2d3b",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ebd5b077b8ee5dcb",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "ae1a2dce88636532"
            ]
        ]
    },
    {
        "id": "b979263c9ec503fd",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "7660d8bc47aa36d6"
            ]
        ]
    },
    {
        "id": "06f7857f7ba29cab",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "5718d44be8d4de38"
            ]
        ]
    },
    {
        "id": "1341a80149fd318a",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1280,
        "wires": [
            [
                "b7ccf828195daa9d"
            ]
        ]
    },
    {
        "id": "60b28f9c1a0ac5b8",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 560,
        "wires": [
            [
                "aaa8c237613f7719"
            ]
        ]
    },
    {
        "id": "9caf103f87d25d72",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 660,
        "wires": [
            [
                "416ee531ccb7dcc6"
            ]
        ]
    },
    {
        "id": "2fdc89e5377ae90d",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 780,
        "wires": [
            [
                "6536798f2570ce67"
            ]
        ]
    },
    {
        "id": "89f666e00b415f9a",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 860,
        "wires": [
            [
                "e156779fadeeb85e"
            ]
        ]
    },
    {
        "id": "67c8b447696efcc4",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 960,
        "wires": [
            [
                "989282fe68c0a670"
            ]
        ]
    },
    {
        "id": "9b29050649c69b72",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 600,
        "wires": []
    },
    {
        "id": "7c36fe1811e73e7a",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 800,
        "wires": []
    },
    {
        "id": "b6a5b3757c6685ae",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 900,
        "wires": []
    },
    {
        "id": "139ee79fc85ad8dc",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 980,
        "wires": []
    },
    {
        "id": "a602ad2d07635062",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "logs",
        "url": "/logs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1490,
        "y": 400,
        "wires": [
            [
                "68cb5766b0f80dd0"
            ]
        ]
    },
    {
        "id": "68cb5766b0f80dd0",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "gerar-log",
        "func": "msg.payload = flow.get(\"logs\") || [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 400,
        "wires": [
            [
                "62aa93bb0cbef7c3"
            ]
        ]
    },
    {
        "id": "62aa93bb0cbef7c3",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1820,
        "y": 400,
        "wires": []
    },
    {
        "id": "3dc84f200903ad4d",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1000,
        "wires": [
            [
                "ed4e5d5a240372ba"
            ]
        ]
    },
    {
        "id": "f754a25c3cd49254",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 940,
        "wires": [
            [
                "ee40c14b1363bb74"
            ]
        ]
    },
    {
        "id": "854c5dfbb2bb953d",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserir-color",
        "url": "/inserir-colors",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "20ffe12c52d1ba5f"
            ]
        ]
    },
    {
        "id": "4a0b0b0dc399faa0",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "inserir-colors",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    let request = msg.request;\n    let colors = global.get('colorsTable') || [];\n    \n    let nextId = 1;\n    if (colors.length > 0) {\n        const ids = colors.map(c => Number(c.uuid));\n        nextId = Math.max(...ids) + 1;\n    }\n\n    let colorExists = colors.find(c => c.colorName === request.colorName);\n    if (colorExists) {\n        msg.statusCode = 200;\n        msg.payload = colorExists;\n        return [msg, null];\n    }\n\n    const newColor = {\n        uuid: nextId.toString(),\n        colorName: request.colorName\n    };\n\n    colors.push(newColor);\n\n    flow.set('colorsTable', colors);\n\n    msg.statusCode = 200;\n    msg.payload = newColor;\n    return [msg, null];\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 280,
        "wires": [
            [
                "6c4e430d22fa9860"
            ],
            [
                "2ac47b027aa16b6f"
            ]
        ]
    },
    {
        "id": "9702f0003ce3f4c7",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 240,
        "wires": []
    },
    {
        "id": "26838785063fb7e3",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "alterar-colors-id",
        "url": "/alterar-colors-id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "51e80797b28c247c"
            ]
        ]
    },
    {
        "id": "065f016ba0887085",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "alterar-color",
        "func": "try {\n    const request = msg.request;\n    const uuid = request.uuid;\n    const requiredFields = ['uuid', 'colorName'];\n    const missingFields = requiredFields.filter(field => !request[field]);\n\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    if (missingFields.length > 0) {\n        msg.statusCode = 400;\n        msg.payload = { error: `Missing required fields: ${missingFields.join(', ')}` };\n        return [null, msg];\n    }\n\n    let colors = global.get('colorsTable') || [];\n    if (!Array.isArray(colors)) {\n        colors = [];\n    }\n\n    let c = colors.find(i => i.uuid === uuid);\n    if (c) {\n        request.uuid = uuid;\n\n        colors = colors.filter(i => i.uuid !== uuid);\n        colors.push(request);\n        global.set('colorsTable', colors);\n\n        msg.statusCode = 200;\n        msg.payload = { message: 'Color updated successfully', color: request };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'Color not found with that UUID' };\n        return [null, msg];\n    }\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: 'Internal server error', detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "73ac6b2c5e9f2d22"
            ],
            [
                "4c1e9af6ec577f99"
            ]
        ]
    },
    {
        "id": "7dd94797087764fb",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 340,
        "wires": []
    },
    {
        "id": "1e81ef4aed2ce81b",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "deletar-color-id",
        "url": "/deletar-color-id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "51c7c5c359329ecb"
            ]
        ]
    },
    {
        "id": "ba89a19d0ed113e0",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "deletar-color",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    const uuid = msg.request.uuid;\n    if (!uuid) {\n        msg.statusCode = 400;\n        msg.payload = { error: 'UUID not provided' };\n        return [null, msg];\n    }\n\n    let colors = global.get('colorsTable') || [];\n    if (!Array.isArray(colors)) {\n        colors = [];\n    }\n\n    let color = colors.find(c => c.uuid === uuid);\n    if (color) {\n        colors = colors.filter(c => c.uuid !== uuid);\n        global.set('colorsTable', colors);\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: 'Color successfully removed' };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'Color not found with that UUID' };\n        return [null, msg];\n    }\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 420,
        "wires": [
            [
                "c017f01b8ffbe7f6"
            ],
            [
                "c0bb4d353492edb2"
            ]
        ]
    },
    {
        "id": "c0ca278d38232159",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 420,
        "wires": []
    },
    {
        "id": "20ffe12c52d1ba5f",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "b4d8d89682b6b05e"
            ]
        ]
    },
    {
        "id": "b4d8d89682b6b05e",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "8ad1dfed36db93df"
            ]
        ]
    },
    {
        "id": "8ad1dfed36db93df",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "4a0b0b0dc399faa0"
            ]
        ]
    },
    {
        "id": "51c7c5c359329ecb",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "f6d45c220d07565a"
            ]
        ]
    },
    {
        "id": "f6d45c220d07565a",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "cabff87933f0f218"
            ]
        ]
    },
    {
        "id": "cabff87933f0f218",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "ba89a19d0ed113e0"
            ]
        ]
    },
    {
        "id": "6c4e430d22fa9860",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 240,
        "wires": [
            [
                "9702f0003ce3f4c7"
            ]
        ]
    },
    {
        "id": "c017f01b8ffbe7f6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 400,
        "wires": [
            [
                "c0ca278d38232159"
            ]
        ]
    },
    {
        "id": "2ac47b027aa16b6f",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 300,
        "wires": []
    },
    {
        "id": "c0bb4d353492edb2",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 460,
        "wires": []
    },
    {
        "id": "5563ed7c192de603",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserir-models",
        "url": "/inserir-models",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "b8a3b50c7509f255"
            ]
        ]
    },
    {
        "id": "51e1a492c022d2ca",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "inserir models",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    let request = msg.request;\n    let models = global.get('modelsTable') || [];\n    \n    let nextId = 1;\n    if (models.length > 0) {\n        const ids = models.map(c => Number(c.uuid));\n        nextId = Math.max(...ids) + 1;\n    }\n\n    let modelExists = models.find(m => m.molorName === request.modelName);\n    if (modelExists) {\n        msg.statusCode = 200;\n        msg.payload = modelExists;\n        return [msg, null];\n    }\n\n    const newModel = {\n        uuid: nextId.toString(),\n        modelName: request.modelName\n    };\n\n    models.push(newModel);\n\n    flow.set('modelsTable', models);\n\n    msg.statusCode = 200;\n    msg.payload = newModel;\n    return [msg, null];\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "3906706aa1686722"
            ],
            [
                "6d2fb08c7d5736c9"
            ]
        ]
    },
    {
        "id": "de6ad926c65dfd7c",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "alterar-models",
        "url": "/alterar-models",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "169ff2e0e1a88b07"
            ]
        ]
    },
    {
        "id": "e872bb5e089c4d98",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 700,
        "wires": []
    },
    {
        "id": "c93ba2f4068ff115",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "deletar-models-id",
        "url": "/deletar-models-id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "06c48ed6af1193bf"
            ]
        ]
    },
    {
        "id": "bf1a15c0908c1518",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 760,
        "wires": []
    },
    {
        "id": "73ac6b2c5e9f2d22",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 320,
        "wires": [
            [
                "7dd94797087764fb"
            ]
        ]
    },
    {
        "id": "4c1e9af6ec577f99",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "51e80797b28c247c",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "4b3809d023865460"
            ]
        ]
    },
    {
        "id": "4b3809d023865460",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 340,
        "wires": [
            [
                "2b48de9b1795ef97"
            ]
        ]
    },
    {
        "id": "2b48de9b1795ef97",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "065f016ba0887085"
            ]
        ]
    },
    {
        "id": "87f5bb005dd0f91b",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 540,
        "wires": []
    },
    {
        "id": "b8a3b50c7509f255",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "dfa6e6351411a87d"
            ]
        ]
    },
    {
        "id": "dfa6e6351411a87d",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "a553f354b9fa5f7e"
            ]
        ]
    },
    {
        "id": "a553f354b9fa5f7e",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 600,
        "wires": [
            [
                "51e1a492c022d2ca"
            ]
        ]
    },
    {
        "id": "acc3781946b27f0a",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 560,
        "wires": []
    },
    {
        "id": "3906706aa1686722",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 560,
        "wires": [
            [
                "acc3781946b27f0a"
            ]
        ]
    },
    {
        "id": "6d2fb08c7d5736c9",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 620,
        "wires": []
    },
    {
        "id": "da6f96767d075d67",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "alterar-model",
        "func": "try {\n    const request = msg.request;\n    const uuid = request.uuid;\n    const requiredFields = ['uuid', 'modelName'];\n    const missingFields = requiredFields.filter(field => !request[field]);\n\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    if (missingFields.length > 0) {\n        msg.statusCode = 400;\n        msg.payload = { error: `Missing required fields: ${missingFields.join(', ')}` };\n        return [null, msg];\n    }\n\n    let models = global.get('modelsTable') || [];\n    if (!Array.isArray(models)) {\n        models = [];\n    }\n\n    let m = models.find(m => m.uuid === uuid);\n    if (m) {\n        request.uuid = uuid;\n\n        models = models.filter(i => i.uuid !== uuid);\n        models.push(request);\n        global.set('modelsTable', models);\n\n        msg.statusCode = 200;\n        msg.payload = { message: 'Model updated successfully', model: request };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'Model not found with that UUID' };\n        return [null, msg];\n    }\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: 'Internal server error', detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 680,
        "wires": [
            [
                "e4e4a4ed304c9d2b"
            ],
            [
                "e872bb5e089c4d98"
            ]
        ]
    },
    {
        "id": "953483b566c3a317",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 660,
        "wires": []
    },
    {
        "id": "e4e4a4ed304c9d2b",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 660,
        "wires": [
            [
                "953483b566c3a317"
            ]
        ]
    },
    {
        "id": "169ff2e0e1a88b07",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "0f27392ba9407e0f"
            ]
        ]
    },
    {
        "id": "0f27392ba9407e0f",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 680,
        "wires": [
            [
                "019bbfe1334563df"
            ]
        ]
    },
    {
        "id": "019bbfe1334563df",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 680,
        "wires": [
            [
                "da6f96767d075d67"
            ]
        ]
    },
    {
        "id": "c9779db9cedefdf7",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "deletar-model",
        "func": "try {\n    if (!msg.user || !msg.user.roles || !msg.user.roles.includes('ADMIN')) {\n        msg.statusCode = 403;\n        msg.payload = { error: 'Forbidden: Admin role required' };\n        return [null, msg];\n    }\n\n    const uuid = msg.request.uuid;\n    if (!uuid) {\n        msg.statusCode = 400;\n        msg.payload = { error: 'UUID not provided' };\n        return [null, msg];\n    }\n\n    let models = global.get('modelsTable') || [];\n    if (!Array.isArray(models)) {\n        models = [];\n    }\n\n    let model = models.find(m => m.uuid === uuid);\n    if (model) {\n        models = models.filter(c => c.uuid !== uuid);\n        global.set('modelsTable', models);\n        msg.statusCode = 200;\n        msg.payload = { success: true, message: 'Model successfully removed' };\n        return [msg, null];\n    } else {\n        msg.statusCode = 404;\n        msg.payload = { error: 'Model not found with that UUID' };\n        return [null, msg];\n    }\n\n} catch (err) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"Internal server error\", detail: err.message };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 760,
        "wires": [
            [
                "fa9a401ec71c32c3"
            ],
            [
                "1b034d604e0d8d85"
            ]
        ]
    },
    {
        "id": "06c48ed6af1193bf",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: 'Token not sent or poorly formatted' };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 760,
        "wires": [
            [
                "9aea69551f8c0ec9"
            ]
        ]
    },
    {
        "id": "9aea69551f8c0ec9",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 760,
        "wires": [
            [
                "a845811014d657a9"
            ]
        ]
    },
    {
        "id": "a845811014d657a9",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "filtrar-roles",
        "func": "const authHeader = msg.req.headers.authorization || '';\nconst token = authHeader.split(' ')[1];\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"No token provided\" };\n    return [null, msg];\n}\n\nconst parts = token.split('.');\nif (parts.length !== 3) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid token format\" };\n    return [null, msg];\n}\n\nconst payload = parts[1];\nconst decoded = Buffer.from(payload, 'base64').toString('utf8');\nconst data = JSON.parse(decoded);\n\nmsg.user = {\n    name: data.name,\n    roles: data.roles\n};\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "c9779db9cedefdf7"
            ]
        ]
    },
    {
        "id": "fa9a401ec71c32c3",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "bf1a15c0908c1518"
            ]
        ]
    },
    {
        "id": "1b034d604e0d8d85",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 820,
        "wires": []
    },
    {
        "id": "c9f68b992138402e",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2580,
        "y": 520,
        "wires": [
            [
                "c24ce0c9eb711bba"
            ]
        ]
    },
    {
        "id": "13ada1433c96a6b1",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 2760,
        "y": 700,
        "wires": []
    },
    {
        "id": "3d673acd3a0ca0db",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.user.name;\nconst route = msg.req.url;\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            [
                "849b98a3bb34bf09"
            ]
        ]
    }
]