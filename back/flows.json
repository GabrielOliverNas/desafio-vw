[
    {
        "id": "e771a27fee406b2a",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07eae8f9fe820c4e",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "dashboard",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "ef41793ff7ea5a80"
            ]
        ]
    },
    {
        "id": "ef41793ff7ea5a80",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Montar-JWT",
        "func": "var authHeader = msg.req.headers.authorization;\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.payload = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "85884d926390e238"
            ]
        ]
    },
    {
        "id": "85884d926390e238",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "payload",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "ee7ca56abe9406f2"
            ]
        ]
    },
    {
        "id": "daafb42cae8476ed",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "ee7ca56abe9406f2",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Retorno-JWT",
        "func": "msg.payload = {\n    status: \"success\",\n    data: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "daafb42cae8476ed"
            ]
        ]
    },
    {
        "id": "58d4f9ef4ce89af9",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserindo-usuarios",
        "url": "/inserir-usuario",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "2798835ee8a62017"
            ]
        ]
    },
    {
        "id": "ed4e5d5a240372ba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 420,
        "wires": []
    },
    {
        "id": "7660d8bc47aa36d6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 7",
        "func": "let payload = msg.payload;\n\nconst user = {\n    uuid: Date.now().toString(),\n    name: payload.name,\n    password: payload.password,\n    isActived: payload.isActived,\n    isRoot: payload.isRoot,\n    roles: payload.roles,\n    creationDate: new Date().toISOString()\n};\n\nlet usuarios = flow.get('users', 'file') || [];\n\nif (!Array.isArray(usuarios)) {\n    usuarios = [];\n}\n\nusuarios.push(user)\n\nflow.set('users', usuarios, 'file');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 420,
        "wires": [
            [
                "ed4e5d5a240372ba"
            ]
        ]
    },
    {
        "id": "2f2b4577e66c6063",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-usuarios",
        "url": "/usuarios",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "ca92d0cf38cc8fa1"
            ]
        ]
    },
    {
        "id": "930307daf030c5a9",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "22b91667282cd53c",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 8",
        "func": "msg.payload = flow.get('users', 'file');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "930307daf030c5a9"
            ]
        ]
    },
    {
        "id": "a9ba72bed6e2feca",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "deletar-usuarios",
        "url": "/deletar-usuarios",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "3a0b8b5abc860260"
            ]
        ]
    },
    {
        "id": "849b98a3bb34bf09",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 480,
        "wires": []
    },
    {
        "id": "5718d44be8d4de38",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 10",
        "func": "flow.set('users',null, 'file');\n\nreturn msg;''",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "849b98a3bb34bf09"
            ]
        ]
    },
    {
        "id": "2798835ee8a62017",
        "type": "bcrypt",
        "z": "e771a27fee406b2a",
        "name": "",
        "action": "encrypt",
        "field": "password",
        "hash": "payload",
        "target": "password",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": "5",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "7660d8bc47aa36d6"
            ]
        ]
    },
    {
        "id": "ee6db109f6b31ba7",
        "type": "inject",
        "z": "e771a27fee406b2a",
        "name": "colors-inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8b456eb5bfe06708",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "table-colors",
        "func": "const colors = [\n  { uuid: global.get('uuid').v4(), colorName: 'Preto' },\n  { uuid: global.get('uuid').v4(), colorName: 'Branco' },\n  { uuid: global.get('uuid').v4(), colorName: 'Vermelho' },\n  { uuid: global.get('uuid').v4(), colorName: 'Cinza' },\n  { uuid: global.get('uuid').v4(), colorName: 'Azul' }\n];\n\nglobal.set('colorTable', colors);\n\nmsg.payload = \"Tabela de COLORS carregada.\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "22f1418d46eabb50"
            ]
        ]
    },
    {
        "id": "22f1418d46eabb50",
        "type": "debug",
        "z": "e771a27fee406b2a",
        "name": "Debug Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "bd6a73b25168887c",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "table-models",
        "func": "const colors = [\n  { uuid: global.get('uuid').v4(), colorName: 'T-Cross' },\n  { uuid: global.get('uuid').v4(), colorName: 'Nivus' },\n  { uuid: global.get('uuid').v4(), colorName: 'Polo' },\n  { uuid: global.get('uuid').v4(), colorName: 'Virtus' },\n  { uuid: global.get('uuid').v4(), colorName: 'Saveiro' },\n  { uuid: global.get('uuid').v4(), colorName: 'Track' }\n];\n\nglobal.set('modelsTable', colors);\n\nmsg.payload = \"Tabela de MODELS carregada.\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "e4ef9b9b757f6773"
            ]
        ]
    },
    {
        "id": "e77304bacf005b68",
        "type": "inject",
        "z": "e771a27fee406b2a",
        "name": "models-inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "bd6a73b25168887c"
            ]
        ]
    },
    {
        "id": "e4ef9b9b757f6773",
        "type": "debug",
        "z": "e771a27fee406b2a",
        "name": "Debug Init",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 100,
        "wires": []
    },
    {
        "id": "bcc2e62901cb0f68",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "buscar-usuario-id",
        "url": "/usuarios-id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "efc2ecc451caab37"
            ]
        ]
    },
    {
        "id": "fb009c7556ac4451",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 600,
        "wires": []
    },
    {
        "id": "b7ccf828195daa9d",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 2",
        "func": "let uuid = msg.request.uuid;\n\nconst usuarios = flow.get('users', 'file') || [];\n\nif (!uuid) {\n    msg.payload = { error: \"UUID n√£o informado\" };\n    return msg;\n}\n\nlet usuario = usuarios.find(user => user.uuid === uuid);\n\nconsole.log(usuario)\n\nmsg.payload = {\n    'message': 'usuario identificado',\n    'usuario': usuario\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 600,
        "wires": [
            [
                "fb009c7556ac4451"
            ]
        ]
    },
    {
        "id": "a9383d9f2e063f8e",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "remover veiculos",
        "url": "/remover-veiculos1",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 820,
        "wires": [
            [
                "d1f8619815780db1"
            ]
        ]
    },
    {
        "id": "d1f8619815780db1",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 1",
        "func": "var authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.payload = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 820,
        "wires": [
            [
                "85bfc452e7b3dab0"
            ]
        ]
    },
    {
        "id": "85bfc452e7b3dab0",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "payload",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 820,
        "wires": [
            [
                "6536798f2570ce67"
            ]
        ]
    },
    {
        "id": "6536798f2570ce67",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Retorno-JWT",
        "func": "flow.set('veiculo', [], 'default');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 820,
        "wires": [
            [
                "77d797dfad31c3fc"
            ]
        ]
    },
    {
        "id": "77d797dfad31c3fc",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.payload.userName;\nconst route = \"/veiculos/inserir\";\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\nlet logs = flow.get(\"logs\") || [];\nlogs.push(logEntry);\nflow.set(\"logs\", logs);\n\nmsg.payload = {\n    dateTime: now,\n    userName: msg.payload.userName,\n    route: '/veiculos/excluir',\n    data: now\n};\n\nflow.set('Logs', 'default')\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            [
                "8a59134bcd54faba"
            ]
        ]
    },
    {
        "id": "8a59134bcd54faba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "aaa8c237613f7719",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 5",
        "func": "const modelsTable = global.get('modelsTable') || [];\nconst colorTable = global.get('colorTable') || [];\n\nlet veiculos = flow.get('veiculo') || [];\nlet payload = msg.request;\nlet creationDate = new Date().toISOString();\nlet updateDate = new Date().toISOString();\n\nconst modeloEncontrado = modelsTable.find(m =>\n    m.modelName.toLowerCase() === payload.model.toLowerCase());\nconst corEncontrada = colorTable.find(c =>\n    c.colorName.toLowerCase() === payload.color.toLowerCase());\n\n\nif (!Array.isArray(veiculos)) {\n    veiculos = [];\n}\n\nif ((modeloEncontrado || corEncontrada) === null || '' || undefined) {\n    msg.payload = {\n        status: 'falha no processo',\n        message: `o campo 'modeloEncontrado' ou 'corEncontrada'nao podem estar nulo`\n    };\n} else {\n    payload.model = {\n        colorName: modeloEncontrado.colorName\n    };\n\n    payload.color = {\n        colorName: corEncontrada.colorName\n    };\n\n    veiculos.push({\n        uuid: global.get('uuid').v4(),\n        creationUserName: payload.creationUserName,\n        updateUserName: payload.updateUserName,\n        creationDate: creationDate,\n        //updateDate: updateDate, quando altera\n        model: modeloEncontrado,\n        color: corEncontrada,\n        year: payload.year,\n        imagePath: payload.imagePath\n    });\n\n    // Salva de volta no contexto\n    flow.set('veiculo', veiculos);\n\n    // Resposta\n    msg.payload = {\n        status: 'sucesso',\n        total: veiculos.length\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 700,
        "wires": [
            [
                "da434780bf5badd5"
            ]
        ]
    },
    {
        "id": "063999c33dd1cf88",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "inserir-veiculo",
        "url": "/inserir-veiculos",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "994f2b227115dc48"
            ]
        ]
    },
    {
        "id": "c24ce0c9eb711bba",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 700,
        "wires": []
    },
    {
        "id": "994f2b227115dc48",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 700,
        "wires": [
            [
                "fe5513e8b01be357"
            ]
        ]
    },
    {
        "id": "fe5513e8b01be357",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "aaa8c237613f7719"
            ]
        ]
    },
    {
        "id": "da434780bf5badd5",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.payload.userName;\nconst route = \"/veiculos/inserir\";\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 700,
        "wires": [
            [
                "c24ce0c9eb711bba"
            ]
        ]
    },
    {
        "id": "d3e38b360fbae5dc",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "listar-veiculos",
        "url": "/listar-veiculos",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "6c683a78c4fff1fe"
            ]
        ]
    },
    {
        "id": "6c683a78c4fff1fe",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "var authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.payload = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 760,
        "wires": [
            [
                "72d009f47c90ac7a"
            ]
        ]
    },
    {
        "id": "72d009f47c90ac7a",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "payload",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 580,
        "y": 760,
        "wires": [
            [
                "416ee531ccb7dcc6"
            ]
        ]
    },
    {
        "id": "416ee531ccb7dcc6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 6",
        "func": "let veiculos = flow.get('veiculo') || [];\n\nif (!Array.isArray(veiculos)) {\n    veiculos = [];\n}\n\nconst page = msg.payload.page || 1;\nconst pageSize = msg.payload.pageSize || 5;\nconst sortField = msg.payload.sortField || 'modelo';\nconst sortOrder = msg.payload.sortOrder || 'asc';\n\nveiculos.sort((a, b) => {\n    if (a[sortField] < b[sortField]) return sortOrder === 'asc' ? -1 : 1;\n    if (a[sortField] > b[sortField]) return sortOrder === 'asc' ? 1 : -1;\n    return 0;\n});\n\nconst startIndex = (page - 1) * pageSize;\nconst endIndex = startIndex + pageSize;\nconst paginatedData = veiculos.slice(startIndex, endIndex);\n\nmsg.payload = {\n    page: page,\n    pageSize: pageSize,\n    total: veiculos.length,\n    data: paginatedData\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            [
                "cd8d5dd2c1e92c9d"
            ]
        ]
    },
    {
        "id": "cd8d5dd2c1e92c9d",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 760,
        "wires": []
    },
    {
        "id": "440b9d10266c5458",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "alterar-usuario",
        "url": "/alterar-usuario",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "74415834210c7a06"
            ]
        ]
    },
    {
        "id": "ae1a2dce88636532",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 4",
        "func": "let usuarios = flow.get('users', 'file') || [];\nlet updateDate = new Date().toISOString();\n\nif (!Array.isArray(usuarios)) {\n    usuarios = [];\n}\n\nconst uuid = msg.request.uuid;\nif (!uuid) {\n    msg.payload = { error: \"UUID n√£o informado\" };\n    return msg;\n}\n\nlet u = usuarios.find(i => i.uuid === uuid);\n\nif (u) {\n    msg.request.uuid = uuid;\n    msg.request.updateDate = updateDate;\n\n    console.log(usuarios)\n    console.log(msg.requestu)\n\n    usuarios.push(msg.request);\n    flow.set('users', usuarios, 'file')\n} else {\n    msg.payload = { error: \"Usu√°rio n√£o encontrado\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "3176f7dc4c9017d7"
            ]
        ]
    },
    {
        "id": "74415834210c7a06",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "d898e96cde341d69"
            ]
        ]
    },
    {
        "id": "d898e96cde341d69",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "ae1a2dce88636532"
            ]
        ]
    },
    {
        "id": "2850e51dc8b3dbda",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "Resposta-HTTP",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 360,
        "wires": []
    },
    {
        "id": "9d147b0d677bee97",
        "type": "http in",
        "z": "e771a27fee406b2a",
        "name": "login",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "fae8ccc85c33ef61"
            ]
        ]
    },
    {
        "id": "fae8ccc85c33ef61",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 11",
        "func": "let usuarios = flow.get('users', 'file') || [];\nlet usuarioRequest = msg.payload;\nlet usuarioBase\n\nlet user = (usuarios.find(i =>\n    i.name === usuarioRequest.name && i.password === usuarioRequest.password)\n)\n\n\nif (!Array.isArray(usuarios)) {\n    usuarios = [];\n}\n\nif (!user) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Invalid credentials\" };\n    return [null, msg];\n}\n\nmsg.user = {\n    name: user.name,\n    roles: user.roles\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "4bbc06ba0a7cefc6"
            ]
        ]
    },
    {
        "id": "ba6d3e4576690e8d",
        "type": "http response",
        "z": "e771a27fee406b2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "4bbc06ba0a7cefc6",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar JWT",
        "func": "msg.jwtSecret = \"minha_chave_secreta\";\nmsg.jwtOptions = { expiresIn: \"1h\" };\n\nmsg.payload = msg.user;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "664438f386876268"
            ]
        ]
    },
    {
        "id": "664438f386876268",
        "type": "jwt sign",
        "z": "e771a27fee406b2a",
        "name": "jwt",
        "algorithm": "HS256",
        "mode": "secret",
        "secret": "minha_chave_secreta",
        "secretType": "str",
        "privateKey": "",
        "privateKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "expiresIn": 3600,
        "expiresInType": "num",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "sign": "user",
        "signType": "msg",
        "notBefore": "",
        "notBeforeType": "num",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "466fe941650891c4"
            ]
        ]
    },
    {
        "id": "466fe941650891c4",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "function 12",
        "func": "msg.payload = { token: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "ba6d3e4576690e8d"
            ]
        ]
    },
    {
        "id": "ca92d0cf38cc8fa1",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 540,
        "wires": [
            [
                "266e2ac5e9ae2868"
            ]
        ]
    },
    {
        "id": "266e2ac5e9ae2868",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "22b91667282cd53c"
            ]
        ]
    },
    {
        "id": "efc2ecc451caab37",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 600,
        "wires": [
            [
                "2ac942dd4fafd962"
            ]
        ]
    },
    {
        "id": "2ac942dd4fafd962",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 540,
        "y": 600,
        "wires": [
            [
                "b7ccf828195daa9d"
            ]
        ]
    },
    {
        "id": "3176f7dc4c9017d7",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "Gerar-log",
        "func": "const now = new Date().toISOString();\nconst userName = msg.payload.userName;\nconst route = \"/veiculos/inserir\";\n\nconst logEntry = `[${now}][${userName}][${route}]: ${JSON.stringify(msg.payload)}`;\n\nlet logs = flow.get(\"logs\") || [];\n\nlogs.push(logEntry);\n\nflow.set(\"logs\", logs);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 360,
        "wires": [
            [
                "2850e51dc8b3dbda"
            ]
        ]
    },
    {
        "id": "3a0b8b5abc860260",
        "type": "function",
        "z": "e771a27fee406b2a",
        "name": "formatar jwt",
        "func": "msg.request = msg.payload\n\nvar authHeader = msg.req.headers['authorization'];\n\nif (authHeader && authHeader.startsWith(\"Bearer \")) {\n    msg.token = authHeader.substring(7);\n    msg.jwtSecret = \"minha_chave_secreta\";\n    return [msg, null];\n} else {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Token n√£o enviado ou mal formatado\" };\n    return [null, msg];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "faa11aa113e8e6bd"
            ]
        ]
    },
    {
        "id": "faa11aa113e8e6bd",
        "type": "jwt verify",
        "z": "e771a27fee406b2a",
        "name": "Validar-Geracao-JWT",
        "algorithms": "HS256",
        "mode": "secret",
        "secret": "jwtSecret",
        "secretType": "msg",
        "publicKey": "",
        "publicKeyType": "str",
        "jwkid": "",
        "jwkidType": "str",
        "jwkurl": "",
        "jwkurlType": "str",
        "ignoreExpiration": "false",
        "ignoreExpirationType": "bool",
        "ignoreNotBefore": "true",
        "ignoreNotBeforeType": "bool",
        "audience": "",
        "audienceType": "str",
        "issuer": "",
        "issuerType": "str",
        "token": "token",
        "maxAge": "",
        "maxAgeType": "num",
        "constraints": [],
        "x": 520,
        "y": 480,
        "wires": [
            [
                "5718d44be8d4de38"
            ]
        ]
    }
]